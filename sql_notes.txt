DAY 1

Select * from emp;
Insert into emp values(104,’Surya’,65), (105,’Sam’,89);
\d emp; —— used to describe the table

\d ; ———— will list all the tables in the database

\c dbname ; ———— will change the database to dynamo;
\l ——— will list all the databases

Single row function

Single row function are the one who work on single row and return one output per row
Select upper (first_name), INITCAP (last_name), LOWER(role) from emp;

Select CONCAT (first_name, last_name) from amp

Aggregate functions

Aggregate function is used to perform the calculation on multiple rows of a single column of a table. It return a single value

Count sum avg max min etc

Select count(*) from employee;

Select sum(salary) from employee;

Group by statement

The group by statement groups rows that have the same values into summary rows like  find the number of employee in each dept

Syntax:
Select column_name  from table_name where condition group by column_name(s) order by column_name;

Example :
Select count (empid), department from employee group by department ;

Joins:

A join clause is used to combine rows from two or more tables based on a related column between them

Inner join 
Outer join 
Self join

A primary key can be used as a reference key(foreign key) but a unique key cannot be used as a reference key

To delete a primary key we need to delete a foreign key 1st and then we can delete a primary key

Inner join :

The inner join keyword selects records that have matching values in both tables

Syntax:
Select column_name(s) from A a inner join B b on a.column_name = b.column_name;

Alter table employee add foreign key did references department (did);

DAY 2

Outer join:
1. fill outer join or outer join:
The full outer join keyword returns all records when there is a match in left table 1 or right table records

Syntax:
Select column_name(s) from table1 Full outer join table2 on table1.column_name = table2.column_name
Where condition;

Left outer join or left join

Return all the rows from left table and common records from right table

Syntax:
Select column_name(s) from A a left Join B b on a.column_name = b.column_name where condition ;

Right outer Join

This join returns all the records from right table and common from the left table

Syntax:

Select column_name(s) from A a right Join B b on a.column_name = b.column_name where condition ;

Self Join 

A self join is a regular join but the table is joined with itself 

Syntax:
Select column_name(s) from A a , A b where condition ;

Subqueries:

A subquery is nested query which is used with select , insert, update delete 
A subquery is called as inner query which is placed in other main query called as outer query .
Inner query will be executed first and then the outer query;
Between operator cannot be used with the subquery
We can also use it with joins

Independent subquery:
Inner query is executed first result of it will be used by outer query for processing .
Inner query does not depends on any data or field of outer query.

An order by cannot be used in a subquery
An group by cannot be used in a subquery

Correlated subquery:

Inner query depends on outer query
Outer query needs to be executed before the inner query 
These query are slower compare to independent sub query
Data from each row in the main query is passed to the subquery for processing

Eg :
Select empname , lastname , salary ,deptid from emp e1 where salary>(select avg(salary) from emp where deptid = e1.deptid);

Transaction management:

A transaction is nothing but making changes to the database
Changes are done through insert , update  or delete commands

Eg : update accounts set balance = balance - 10000 where name = ‘Nithin sir’;

The following commands are used to control transactions:
1. Begin or begin transaction —— to start a transaction 
2. Commit or end transaction —— to save the changes
3. Rollback—— To rollback the changes
These are used with the dml commands insert , update and delete only

Eg: Delete from employee where emptied = 19;
Rollback;

Database indexes:

Indeed are a common way to enhance the database performance 
An index allows the db server to find and retrieve specific rows much faster than it could do without an index.

We can improve efficiency using indexes 
Its similar with indexes used with most of the books at a last alphabetically 
To check index working or not we can use explain command

Explain select * from emp where rname=“asha”;

syntax: create index indexname on tablename(column name);

Eg 
Create index empindx on emp(name);

Drop index:
Eg alter table table name drop index index_name;

Alter table emp drop index empidx;

Database views:

A Postgres view is a virtual table in Postgres 
It represents the results of a query to one or more underlying table in Postgres 
Views are used to simplify complex queries 
A view can represent a subset of a real table 
A vie can even represent joined tables 
We can use them to restrict table access so that users see only specific rows or columns in a table

Syntax:
Create view view name as select column1, column2….. from table_name where condition 

Eg 
Create view empsalary as select name, salary from emp;
Select * from empsalary;
View name acts as a table ;
Drop view view name;

Arrays:

Create table testarray(mobile_numbers TEXT[], ename TEXT);
